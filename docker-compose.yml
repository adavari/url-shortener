networks:
  db-cluster:
    driver: bridge
  redis-cluster:
    driver: bridge
  zookeeper-cluster:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  prometheus_data: { }
  grafana_data: { }

services:

  prometheus:
    image: 'prom/prometheus:v2.36.2'
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    healthcheck:
      test: [ "CMD", "wget", "http://localhost:9090" ]
      interval: 10s
      timeout: 15s
      retries: 10
      start_period: 5s
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - monitoring
    restart: always

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,rslave
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - monitoring
    restart: always
    deploy:
      mode: global

  grafana:
    image: grafana/grafana
    user: "472"
    depends_on:
      prometheus:
        condition: service_healthy
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - monitoring
    restart: always

  postgres:
    image: 'postgres:14.2'
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=username
      - POSTGRES_DB=shortener
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - db-cluster

  redis:
    image: 'redis:6.2.6'
    networks:
      - redis-cluster

  zookeeper:
    image: 'bitnami/zookeeper:3.6.2'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - zookeeper-cluster

  shortener:
    build: .
    ports:
      - '8080:8080'
    networks:
      - zookeeper-cluster
      - db-cluster
      - redis-cluster
      - monitoring
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      zookeeper:
        condition: service_started
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=username
      - REDIS_HOST=redis
      - ZOOKEEPER_HOST=zookeeper

